AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  java-lambda-s3

  Sample SAM Template for java-lambda-s3

Globals:
  Function:
    Timeout: 20

Parameters:
  AppEnv:
    Type: String
    Default: stage
    Description: Application environment
  NotificationSender:
    Type: String
    Default: vanducld@gmail.com
    Description: Sender email  for SES
  NotificationReceiver:
    Type: String
    Default: vanducld@icloud.com
    Description: Receiver email  for SES
  UploadFileBucketName:
    Type: String
    Default: receipt-listing-2022-04-18-17-48-ap-southeast-1
    Description: S3 bucket that's used for the Lambda event notification

Resources:
  GatewayAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref AppEnv
      Cors:
        AllowMethods: "'POST,OPTIONS'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
        AllowCredentials: false
        MaxAge: "'86400'"

  UploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref UploadFileBucketName
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
            AllowedOrigins:
              - "*"
            ExposedHeaders:
              - Date
            MaxAge: 3600
  UploadFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: UploadFileFunction
      Role: !GetAtt LambdaIAMRole.Arn
      Handler: com.github.vanduc1102.uploadfile.App::handleRequest
      Runtime: java11
      MemorySize: 512
      Environment:
        Variables:
          UPLOAD_BUCKET: !Ref UploadFileBucketName
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        UploadFile:
          Type: Api
          Properties:
            Path: /upload-file
            Method: post
            RestApiId: !Ref GatewayAPI

  SendNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SendNotificationFunction
      Role: !GetAtt LambdaIAMRole.Arn
      Handler: com.github.vanduc1102.sendnofitication.App::handleRequest
      Runtime: java11
      MemorySize: 512
      Environment:
        Variables:
          NOTIFICATION_SENDER: !Ref NotificationSender
          NOTIFICATION_RECEIVER: !Ref NotificationReceiver
          UPLOAD_BUCKET: !Ref UploadFileBucketName
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        PutUploadFileEvent:
          Type: S3
          Properties:
            Bucket: !Ref UploadBucket
            Events: s3:ObjectCreated:Put
  LambdaIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: !Sub "arn:aws:s3:::${UploadFileBucketName}/*"
              - Effect: Allow
                Action:
                  - "ses:SendEmail"
                  - "ses:SendRawEmail"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
Outputs:
  UploadFileApi:
    Description: "API Gateway endpoint URL for UploadFileFunction"
    Value: !Sub "https://${GatewayAPI}.execute-api.${AWS::Region}.amazonaws.com/${AppEnv}/upload-file/"
  UploadFileFunction:
    Description: "UploadFileFunction Lambda Function ARN"
    Value: !GetAtt UploadFileFunction.Arn
